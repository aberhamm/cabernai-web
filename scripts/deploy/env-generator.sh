#!/bin/bash

# Environment Variable Generator for Cabernai Web
# This script helps generate secure environment variables for all levels

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

echo_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

echo_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

generate_secret() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
}

generate_uuid() {
    if command -v uuidgen >/dev/null 2>&1; then
        uuidgen | tr '[:upper:]' '[:lower:]'
    else
        cat /proc/sys/kernel/random/uuid
    fi
}

# Cross-platform sed function
sed_inplace() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i "" "$@"
    else
        # Linux
        sed -i "$@"
    fi
}



main() {
    echo_info "Cabernai Web Environment Generator (Simplified)"
    echo_info "=============================================="
    echo ""
    echo_info "ðŸŽ¯ Creating ONE comprehensive .env file for all containers"
    echo_info "âœ¨ Uses Docker Compose env_file directive for automatic loading"
    echo ""

    # Check if root .env already exists
    if [[ -f .env ]]; then
        echo_warn "Root .env file already exists!"
        read -p "Do you want to regenerate it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo_info "Exiting without changes."
            exit 0
        fi
    fi

    # Generate secure secrets
    echo_step "Generating secure secrets..."

    APP_KEY_1=$(generate_secret)
    APP_KEY_2=$(generate_secret)
    APP_KEY_3=$(generate_secret)
    APP_KEY_4=$(generate_secret)
    ADMIN_JWT_SECRET=$(generate_secret)
    API_TOKEN_SALT=$(generate_secret)
    TRANSFER_TOKEN_SALT=$(generate_secret)
    JWT_SECRET=$(generate_secret)
    NEXTAUTH_SECRET=$(generate_secret)

    echo_info "âœ“ Generated secure secrets"

    # Prompt for domain
    echo_step "Domain Configuration"
    read -p "Enter your domain (e.g., example.com): " DOMAIN

    # Prompt for Supabase database URL
    echo_step "Supabase Database Configuration"
    echo_info "Go to your Supabase project:"
    echo_info "Dashboard > Settings > Database > Connection string (URI)"
    echo_info "Copy the connection string and replace 'your-password' with your actual password"
    echo ""
    read -p "Enter your Supabase database URL: " SUPABASE_URL

    # File upload configuration
    echo_step "File Upload Configuration"
    echo_info "Choose your file upload provider:"
    echo_info "1) Cloudinary (Recommended)"
    echo_info "2) AWS S3"
    echo_info "3) Skip for now"
    read -p "Choose option (1-3): " UPLOAD_CHOICE

    case $UPLOAD_CHOICE in
        1)
            echo_info "Cloudinary Configuration:"
            read -p "Cloudinary name: " CLOUDINARY_NAME
            read -p "Cloudinary API key: " CLOUDINARY_API_KEY
            read -p "Cloudinary API secret: " CLOUDINARY_API_SECRET
            ;;
        2)
            echo_info "AWS S3 Configuration:"
            read -p "AWS Access Key ID: " AWS_ACCESS_KEY_ID
            read -p "AWS Secret Access Key: " AWS_ACCESS_SECRET
            read -p "AWS Region: " AWS_REGION
            read -p "S3 Bucket Name: " AWS_BUCKET
            ;;
        3)
            echo_info "Skipping file upload configuration"
            ;;
    esac

    # Optional services
    echo_step "Optional Services"

    # Mailgun
    read -p "Configure Mailgun for email? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "Mailgun API key: " MAILGUN_API_KEY
        read -p "Mailgun domain: " MAILGUN_DOMAIN
        read -p "Mailgun email: " MAILGUN_EMAIL
    fi

    # Sentry
    read -p "Configure Sentry for monitoring? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "Sentry DSN: " SENTRY_DSN
    fi

    echo ""
    echo_step "Creating comprehensive environment file..."

    # Create the unified .env file
    cat > .env << EOF
# Cabernai Web Production Environment
# Generated by env-generator.sh (Simplified)
# ðŸŽ¯ This file is automatically loaded into ALL containers via env_file directive

# ----- URLs -----
UI_PUBLIC_URL=${DOMAIN:+https://$DOMAIN}${DOMAIN:-http://localhost:3000}
STRAPI_PUBLIC_URL=${DOMAIN:+https://$DOMAIN}${DOMAIN:-http://localhost:1337}
NEXT_PUBLIC_APP_PUBLIC_URL=${DOMAIN:+https://$DOMAIN}${DOMAIN:-http://localhost:3000}
NEXT_PUBLIC_STRAPI_URL=${DOMAIN:+https://$DOMAIN}${DOMAIN:-http://localhost:1337}

# ----- Database (Supabase) -----
SUPABASE_DATABASE_URL=$SUPABASE_URL
DATABASE_URL=$SUPABASE_URL

# ----- Strapi Secrets -----
APP_KEYS=$APP_KEY_1,$APP_KEY_2,$APP_KEY_3,$APP_KEY_4
ADMIN_JWT_SECRET=$ADMIN_JWT_SECRET
API_TOKEN_SALT=$API_TOKEN_SALT
TRANSFER_TOKEN_SALT=$TRANSFER_TOKEN_SALT
JWT_SECRET=$JWT_SECRET
PUBLIC_URL=${DOMAIN:+https://$DOMAIN}${DOMAIN:-http://localhost:1337}
APP_URL=${DOMAIN:+https://$DOMAIN}${DOMAIN:-http://localhost:1337}
HOST=0.0.0.0
PORT=1337

# ----- NextAuth -----
NEXTAUTH_SECRET=$NEXTAUTH_SECRET
NEXTAUTH_URL=${DOMAIN:+https://$DOMAIN}${DOMAIN:-http://localhost:3000}

# ----- File Upload -----
EOF

    # Add file upload configuration
    if [[ -n "$CLOUDINARY_NAME" && -n "$CLOUDINARY_API_KEY" && -n "$CLOUDINARY_API_SECRET" ]]; then
        cat >> .env << EOF
CLOUDINARY_NAME=$CLOUDINARY_NAME
CLOUDINARY_API_KEY=$CLOUDINARY_API_KEY
CLOUDINARY_API_SECRET=$CLOUDINARY_API_SECRET
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=$CLOUDINARY_NAME
EOF
    elif [[ -n "$AWS_ACCESS_KEY_ID" && -n "$AWS_ACCESS_SECRET" && -n "$AWS_REGION" && -n "$AWS_BUCKET" ]]; then
        cat >> .env << EOF
AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
AWS_ACCESS_SECRET=$AWS_ACCESS_SECRET
AWS_REGION=$AWS_REGION
AWS_BUCKET=$AWS_BUCKET
EOF
    fi

    # Add optional services
    if [[ -n "$MAILGUN_API_KEY" && -n "$MAILGUN_DOMAIN" && -n "$MAILGUN_EMAIL" ]]; then
        cat >> .env << EOF

# ----- Email (Mailgun) -----
MAILGUN_API_KEY=$MAILGUN_API_KEY
MAILGUN_DOMAIN=$MAILGUN_DOMAIN
MAILGUN_EMAIL=$MAILGUN_EMAIL
EOF
    fi

    if [[ -n "$SENTRY_DSN" ]]; then
        cat >> .env << EOF

# ----- Monitoring -----
SENTRY_DSN=$SENTRY_DSN
NEXT_PUBLIC_SENTRY_DSN=$SENTRY_DSN
SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1
EOF
    fi

    cat >> .env << EOF

# ----- System -----
CRON_ENABLED=true
NODE_ENV=production
NEXT_OUTPUT=standalone
NEXT_IMAGES_UNOPTIMIZED=false
EOF

    echo_info "âœ“ Comprehensive .env file created with all variables for both services"

    echo ""
    echo_info "ðŸŽ‰ Comprehensive environment file generated successfully!"
    echo ""
    echo_warn "File created:"
    echo_warn "- .env (automatically loaded into ALL containers via env_file directive)"
    echo ""
    echo_info "âœ¨ Benefits of the simplified approach:"
    echo_info "  â€¢ ONE file contains ALL variables for both Strapi and Next.js"
    echo_info "  â€¢ Automatic loading via Docker Compose env_file directive"
    echo_info "  â€¢ 67% less complexity than multi-file approach"
    echo_info "  â€¢ Same functionality, much easier to manage"
    echo ""
    echo_warn "Remember to:"
    echo_warn "1. Review the .env file for any missing values"
    echo_warn "2. Never commit .env files to version control"
    echo_warn "3. Keep your secrets secure"
    echo ""
    echo_info "Next steps:"
    echo_info "1. Deploy: ./scripts/deploy/deploy.sh production"
    echo_info "2. Or setup GitHub Actions with this single .env file"
}

main "$@"
