# GitHub Actions workflow for deploying to DigitalOcean droplet
# Save this file as .github/workflows/deploy.yml

name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  PROJECT_NAME: cabernai-web
  DEPLOY_USER: deploy

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint code
        run: NODE_ENV=development yarn lint

      - name: Type check
        run: |
          cd apps/ui && NODE_ENV=development yarn typecheck
          cd ../strapi && NODE_ENV=development yarn generate:types

      - name: Build applications
        env:
          # Production environment variables for build - derived from domain
          NEXT_PUBLIC_APP_PUBLIC_URL: https://${{ vars.DOMAIN_NAME }}
          NEXT_PUBLIC_STRAPI_URL: https://${{ vars.DOMAIN_NAME }}
          NODE_ENV: production
        run: |
          echo "🔍 Debug: DOMAIN_NAME = '${{ vars.DOMAIN_NAME }}'"
          echo "🔍 Debug: NEXT_PUBLIC_APP_PUBLIC_URL = '$NEXT_PUBLIC_APP_PUBLIC_URL'"
          echo "🔍 Debug: NEXT_PUBLIC_STRAPI_URL = '$NEXT_PUBLIC_STRAPI_URL'"
          yarn build

  deploy:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://${{ vars.DOMAIN_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ secrets.DROPLET_HOST }} "
            sudo mkdir -p /opt/${{ env.PROJECT_NAME }}
            sudo chown ${{ env.DEPLOY_USER }}:${{ env.DEPLOY_USER }} /opt/${{ env.PROJECT_NAME }}
          "

      - name: Copy project files
        run: |
          rsync -avz --delete \
            --exclude node_modules \
            --exclude .git \
            --exclude .env \
            --exclude dist \
            --exclude .next \
            --exclude .cache \
            --exclude .tmp \
            ./ ${{ env.DEPLOY_USER }}@${{ secrets.DROPLET_HOST }}:/opt/${{ env.PROJECT_NAME }}/

      - name: Create environment file
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ secrets.DROPLET_HOST }} "
            cd /opt/${{ env.PROJECT_NAME }}

            # Create single .env file - automatically loaded into all containers via env_file directive
            cat > .env << 'EOF'
          # URLs - consolidated from domain name (public, not sensitive)
          NEXT_PUBLIC_APP_PUBLIC_URL=https://${{ vars.DOMAIN_NAME }}
          NEXT_PUBLIC_STRAPI_URL=https://${{ vars.DOMAIN_NAME }}
          NEXTAUTH_URL=https://${{ vars.DOMAIN_NAME }}
          APP_URL=https://${{ vars.DOMAIN_NAME }}

          # Database - single source, duplicated for compatibility
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          SUPABASE_DATABASE_URL=${{ secrets.DATABASE_URL }}

          # Strapi secrets
          APP_KEYS=${{ secrets.APP_KEYS }}
          ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
          API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
          TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PUBLIC_URL=https://${{ vars.DOMAIN_NAME }}
          HOST=0.0.0.0
          PORT=1337

          # NextAuth
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          # NextAuth URL already set above

          # File upload - Cloudinary (name duplicated for Next.js compatibility)
          CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_NAME }}

          # Optional services
          MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }}
          MAILGUN_EMAIL=${{ secrets.MAILGUN_EMAIL }}

          # Monitoring - Sentry (DSN duplicated for Next.js compatibility)
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          NEXT_PUBLIC_SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1

          # System
          CRON_ENABLED=true
          NODE_ENV=production
          NEXT_OUTPUT=standalone
          NEXT_IMAGES_UNOPTIMIZED=false
          EOF

            echo '✅ Created single .env file - automatically loaded into ALL containers!'
          "

      - name: Deploy application
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ secrets.DROPLET_HOST }} "
            cd /opt/${{ env.PROJECT_NAME }}

            # Make scripts executable
            chmod +x scripts/deploy/deploy.sh

            # Run deployment
            ./scripts/deploy/deploy.sh production
          "

      - name: Verify deployment
        run: |
          # Wait for services to start
          sleep 60

          # Check if services are responding
          if curl -f -s https://${{ vars.DOMAIN_NAME }}/health; then
            echo '✅ UI is responding'
          else
            echo '❌ UI is not responding'
            exit 1
          fi

          if curl -f -s https://${{ vars.DOMAIN_NAME }}/api/health; then
            echo '✅ API is responding'
          else
            echo '❌ API is not responding'
            exit 1
          fi

      - name: Notify deployment success
        if: success()
        run: echo "🚀 Deployment successful!"

      - name: Notify deployment failure
        if: failure()
        run: echo "❌ Deployment failed!"
