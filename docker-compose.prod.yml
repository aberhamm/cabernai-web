version: '3.8'

services:
  # Strapi CMS Backend
  strapi:
    build:
      context: .
      dockerfile: apps/strapi/Dockerfile
      args:
        APP: strapi
        WORKSPACE: '@repo/strapi'
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_CLIENT: postgres
      DATABASE_URL: ${SUPABASE_DATABASE_URL}
      DATABASE_SSL: true
      DATABASE_SSL_REJECT_UNAUTHORIZED: false
      APP_KEYS: ${APP_KEYS}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      PUBLIC_URL: ${STRAPI_PUBLIC_URL}
      APP_URL: ${STRAPI_PUBLIC_URL}
      # File upload (Cloudinary or AWS S3)
      CLOUDINARY_NAME: ${CLOUDINARY_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      # Optional: Sentry monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      # Optional: Email (Mailgun)
      MAILGUN_API_KEY: ${MAILGUN_API_KEY}
      MAILGUN_DOMAIN: ${MAILGUN_DOMAIN}
      MAILGUN_EMAIL: ${MAILGUN_EMAIL}
    volumes:
      - strapi_uploads:/app/apps/strapi/public/uploads
    networks:
      - app_network
    depends_on:
      - nginx
    labels:
      - 'traefik.enable=false'

  # Next.js Frontend
  ui:
    build:
      context: .
      dockerfile: apps/ui/Dockerfile
      args:
        APP: ui
        WORKSPACE: '@repo/ui'
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_APP_PUBLIC_URL: ${UI_PUBLIC_URL}
      NEXT_PUBLIC_STRAPI_URL: ${STRAPI_PUBLIC_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${UI_PUBLIC_URL}
      # Optional: Sentry monitoring
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    networks:
      - app_network
    depends_on:
      - strapi
      - nginx
    labels:
      - 'traefik.enable=false'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - app_network
    depends_on:
      - strapi
      - ui

  # Watchtower for automatic updates (optional)
  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_POLL_INTERVAL: 3600 # Check every hour
      WATCHTOWER_INCLUDE_STOPPED: true
    command: --interval 3600 --cleanup
    networks:
      - app_network

volumes:
  strapi_uploads:
  nginx_cache:

networks:
  app_network:
    driver: bridge
